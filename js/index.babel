d3.json("https://raw.githubusercontent.com/DealPete/forceDirected/master/countries.json", (error, data) => {
	if (error) throw error;
	const nodes = data.nodes,
		links = data.links,
		url = "https: //cdnjs.cloudflare.com/ajax/libs/flag-icon-css/2.5.0/flags/1x1/";

	const padding = 50,
		w = document.getElementById("main").clientWidth - padding * 2,
		h = document.getElementById("main").clientHeight - padding * 2;

	var tooltips = d3.select("#main").append("div")
		.attr("class", "tooltip")
		.style("opacity", 0);

	// Set SVG dimensions and append axes
	const chart = d3.select("svg")
		.attr("width", w + padding * 2)
		.attr("height", h + padding * 2);

	const link = chart.selectAll("line")
		.data(links)
		.enter()
		.append("line");

	const node = chart.selectAll("img")
		.data(nodes)
		.enter()
		.append("img")
		.attr("width", 15)
		.attr("height", 10)
		.attr("xlink:href", d => url + d.code + ".svg")


	const simulation = d3.forceSimulation() // https://github.com/d3/d3-force/blob/master/README.md#simulation_force
		.nodes(nodes)
		.force("charge", d3.forceManyBody().strength(-20))
		.force("center", d3.forceCenter(w / 2, h / 2))
		.force("link", d3.forceLink().distance(10).strength(0.2))
		.force("x", d3.forceX())
		.force("y", d3.forceY());

	simulation.force("link")
		.links(links);

	simulation.on("tick", function() {
		node.style("left", function(d) {
			return d.x - 8 + "px";
		}).style("top", function(d) {
			return d.y - 5 + "px";
		});


		link.attr('x1', function(d) {
			return d.source.x;
		}).attr('x2', function(d) {
			return d.target.x;
		}).attr('y1', function(d) {
			return d.source.y;
		}).attr('y2', function(d) {
			return d.target.y;
		});

	});



});
